@{
	ViewData["Title"] = "Round";
}
@model TournamentDto
@inject ITournamentsService tournamentService
@using System.Collections.Generic

@inject IUsersService usersService
@inject IAuthManager authManager
@inject IPlayersService playersService
@inject IPhotoService photoService

@{
	var rounds = this.tournamentService.GetRounds(this.Model.Id);
	var user = this.authManager.CurrentUser;
	int counterScore1 = 0;
	//Dictionary<string, string> matchesScores = new Dictionary<string, string>();
}
<body>
	<section class="breadcrumb-section set-bg" data-setbg="/img/breadcrumb-bg.jpg" style="background-image: url(&quot;img/breadcrumb-bg.jpg&quot;);">
		<div class="container">
			<div class="row">
				<div class="col-lg-12">
					<div class="bs-text">
						<h2>@this.Model.Title</h2>
					</div>
					<div class="bs-text">
						<h2>@this.Model.Format</h2>
					</div>
				</div>
			</div>
		</div>
	</section>



	@for (int i = 0; i < rounds.Count; i++)
	{
		bool isFinished = true;


		var matches = rounds[i].Matches.ToList();
		@foreach (var match in matches)
		{
			if (match.Status == "Current")
			{
				isFinished = false;
			}

			var player1 = this.playersService.GetByFullName(match.Players[0]);
			var player2 = this.playersService.GetByFullName(match.Players[1]);

			<div class="container" style="bg-primary">
				<div class="row">
					<div class="col-lg-12">
						<div class="schedule-text">
							<h4 class="st-title">Round:@rounds[i].RoundNumber</h4>
							<div class="st-table">
								<table>
									<tbody>
										@{

											var email = this.usersService.GetById(match.DirectorId).Email;
												<tr>
													<td class="left-team">
														<img src="@photoService.GetPhotoUrl(player1.Id)" style="width:100px; height:100px"  alt="">
														<h4 class="text-white">@match.Players[0]</h4>
													</td>
													<td class="st-option">
														<div class="so-text"><h6>Director: @email</h6></div>
														<br />
														@{


														var dictScores = new Dictionary<string, string>
										{
										{ "matchId", match.Id.ToString() },
										{ "score1", "" },
										{ "score2", "" }
										};

														if (user != null && (user.Role.Name.Equals("Admin") && (@match.Status == "Current") || (user.Role.Name.Equals("Director") && (user.Id == @match.DirectorId))) && (@match.Status == "Current"))
														{
															counterScore1++;
																	<form asp-controller="Tournaments" asp-action="FinishMatch" asp-all-route-data="@dictScores" asp-route-id="@match.Id" method="get" id="@rounds[i]">


																		<div class="group-in">
																			<input asp-for="@dictScores["score1"]" type="text" class="match-result" id="score1" value="0">
																			<input asp-for="@dictScores["score2"]" type="text" class="match-result" id="score2" value="0">
																		</div>
																		<br>
																		@if (this.Model.Format == TournamentFormat.League)
																{

																			<button type="button" id="btn(@counterScore1)" class="btn btn-warning" name="timer">Start</button>
																			<button class="btn btn-dark" id="btn(@counterScore1)-finish" type="submit" name="btn-finish">Finish</button>

																}else
																{
																	
																		<button class="btn btn-dark" type="submit" onmouseover="validateScore(@counterScore1)">Finish match</button>
																		<div class="popup" id="popup">
                                                                                                    <img class="img-responsive" id="img-popup" src="/img/triangle-yellow.png">
                                                                                                    <h3>Please update the score!</h3>
                                                                                                    <p>The match is score limited. The result could not be draw!!!</p>
                                                                                                    <button type="button" onclick="closePopup()">OK</button>
                                                                                                </div>
																}
																	</form>
																	<br>
																	<div id="btn(@counterScore1)-arrows" class="d-flex justify-content-around">
																		<button type="button" class="btn btn-secondary btn-sm" onclick="increment1(@counterScore1)" name="arrow">&#8593;</button>
																		<button type="button" class="btn btn-secondary btn-sm" onclick="decrement1(@counterScore1)" name="arrow">&#8595</button>
																		<button type="button" class="btn btn-secondary btn-sm" onclick="increment2(@counterScore1)" name="arrow">&#8593;</button>
																		<button type="button" class="btn btn-secondary btn-sm" onclick="decrement2(@counterScore1)" name="arrow">&#8595</button>

																	</div>
														}
														else
														{
																	<h4 class="text-white">@match.Score1 : @match.Score2</h4>
														}

														}
														<br />
														<div class="so-text"><h6>@match.Date.ToString("dd/MM/yyyy")</h6></div>
													</td>
													<td class="right-team pr-0">
														<img src="@photoService.GetPhotoUrl(player2.Id)" style="width:100px; height:100px" alt="">
														<h4 class="text-white">@match.Players[1]</h4>
													</td>

													<td class="st-option">
														<a asp-controller="Matches" asp-action="Details" asp-route-id="@match.Id" class="primary-btn">Details</a>
													</td>
												</tr>

										}
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>

		}
		<div class="contact-form text-center">
			@{
				if (user != null && (user.Role.Name.Equals("Admin")) || user != null && (user.Role.Name.Equals("Director")))
				{

					if (rounds[i].Matches.Count != 1 && this.Model.Format == TournamentFormat.Knockout)
					{
						if (i < rounds.Count - 1 || isFinished == false)
						{
								<a asp-controller="Tournaments" asp-action="NextRound" asp-route-id="@this.Model.Id" method="get" class="btn btn-success disabled btn-lg" aria-disabled="true">Finish Round</a>
						}
						else
						{
								<a asp-controller="Tournaments" asp-action="NextRound" asp-route-id="@this.Model.Id" method="get" class="primary-btn">Finish Round</a>
						}
					}
					else if (rounds[i].Matches.Count == 1 && this.Model.Format == TournamentFormat.Knockout)
					{
						if (isFinished)
						{
								<a asp-controller="Tournaments" asp-action="NextRound" asp-route-id="@this.Model.Id" method="get" class="primary-btn">Finish Tournament</a>
						}
						else
						{
								<a asp-controller="Tournaments" asp-action="NextRound" asp-route-id="@this.Model.Id" method="get" class="btn btn-success disabled btn-lg">Finish Tournament</a>

						}
					}
					else if (i == rounds.Count - 1 && this.Model.Format == TournamentFormat.League && isFinished == true)
					{
							<a asp-controller="Tournaments" asp-action="FinishLeague" asp-route-id="@this.Model.Id" method="get" class="primary-btn">Finish League</a>

					}
				}

			}
		</div>

	}

</body>


<style>
	.match-result {
		width: 30px;
	}

	#timerCountDown:disabled {
		background: grey;
		border: grey;
	}

	 h2, h4, h6, label {
        font-weight: bold;
        color: #e5e5e5;
    }

	.popup {
        width: 400px;
        background: #fff;
        border-radius: 6px;
        position: absolute;
        top: 0;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.1);
        text-align: center;
        padding: 0 30px 30px;
        color: #333;
        visibility: hidden;
        transition: transform 0.4s, top 0.4s;
    }
    .open-popup{
        visibility: visible;
        top: 50%;
        transform: translate(-50%, -50%) scale(1);
    }
    #img-popup{
        width: 150px;
        height: auto;
        margin-top: -80px;
    }
    .popup h3{
        font-size: 38px;
        font-weight: 500;
        margin: 30px 0 10px;    
    }
    .popup button{
        width: 100%;
        margin-top: 50px;
        padding: 10px 0;
        background: #ffb907;
        color: black;
        border: 0;
        outline: none;
        font-size: 18px;
        border-radius: 4px;
        cursor: pointer;
        box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);
    }


</style>

<script>
	var scores = document.getElementsByClassName('match-result');
	const finishButtons = document.getElementsByName('btn-finish');
	for (let finish of finishButtons) {
		finish.disabled = true;
	}

	function startTimeCountDown(timerElement) {

		let timer = 3;
		const timeCountdown = setInterval(function() {
			if (timer == 0) {
				clearTimeout(timer);
				timerElement.innerHTML = 'End';
				document.getElementsByClassName('btn btn-dark disabled')[0]
				let id = timerElement.getAttribute('id');
				document.getElementById(`${id}-finish`).disabled = false;
				let arrowsDiv = document.getElementById(`${id}-arrows`);
				let arrows = arrowsDiv.children;
				for (i = 0; i < 4; i++) {
					arrows[i].disabled = true;
				}


				for (j = 0; j < scores.length; j++) {
					scores[i].disabled = true;
				}
			} else {
				timerElement.disabled = true;
				timerElement.innerHTML = timer + ' secs';
				timer--;
			}
		}, 1000);
	}

	var timerElements = document.getElementsByName("timer");

	for (let timerElement of timerElements) {
		timerElement.addEventListener('click', ev => {
			startTimeCountDown(timerElement);
		});
	}




	function increment1(count) {
		var index = count * 2 - 2;
		var score = document.getElementsByClassName('match-result')[index].value;
		score++;
		document.getElementsByClassName('match-result')[index].value = score;
	}

	function decrement1(count) {
		var index = count * 2 - 2;
		var score = document.getElementsByClassName('match-result')[index].value;
		if (score > 0) {
			score--;
		}
		document.getElementsByClassName('match-result')[index].value = score;
	}

	function increment2(count) {
		var index = count * 2 - 1;
		var score = document.getElementsByClassName('match-result')[index].value;
		score++;
		document.getElementsByClassName('match-result')[index].value = score;
	}

	function decrement2(count) {
		var index = count * 2 - 1;
		var score = document.getElementsByClassName('match-result')[index].value;
		if (score > 0) {
			score--;
		}
		document.getElementsByClassName('match-result')[index].value = score;
	}

	//function validateScore(count) {
	//	var index1 = count * 2 - 2;
	//	var index2 = count * 2 - 1;
	//	var input1 = document.getElementsByClassName('match-result')[index1].value;
	//	var input2 = document.getElementsByClassName('match-result')[index2].value;
	//	if (input1 == input2) {
	//		alert("The match is score limited. The result could not be draw!!!");
	//	}
	//}
	    function validateScore(count) {
        var index1 = count * 2 - 2;
        var index2 = count * 2 - 1;
        var input1 = document.getElementsByClassName('match-result')[index1].value;
        var input2 = document.getElementsByClassName('match-result')[index2].value;
        if (input1 == input2) {
             openPopup();
        }
    }

    function openPopup() {
    let popup = document.getElementById("popup");
    popup.classList.add("open-popup");
    }
    function closePopup() {
        let popup = document.getElementById("popup");
        popup.classList.remove("open-popup");
    }


</script>
